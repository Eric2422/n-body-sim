import numpy as np
import scipy

from particle import PointParticle


class Wire():
    """A straight current-carrying wire with a specified position, length, and resistance.
    """

    def __init__(self, points: np.ndarray[np.float64], resistance: np.float64 = 1.0) -> None:
        """Initiate a an current-carrying wire.

        Parameters
        ----------
        points : np.ndarray[np.float64]
            A 2D array of the points that the wire connects.
        resistance : np.float64
            The total resistance of the wire. Greater than 0, by default 1.0
        """
        self.points = points
        self.resistance = resistance

    def get_point_along_wire(self, distance: np.float64) -> np.ndarray[np.float64]:
        """Return the point that is a given distance along the wire from the first point.

        Parameters
        ----------
        distance : np.float64
            _description_

        Returns
        -------
        np.ndarray[np.float64]
            _description_
        
        Notes
        -----
        This function exists purely for integration.
        """

        pass

    def get_total_length(self) -> np.float64:
        """Calculate the total length of the wire.

        Returns
        -------
        np.float64
            A scalar value representing the total length of this wire. 
        """
        # Sum the distance between each point
        length = 0
        for i in range(0, len(self.points) - 1):
            length += np.linalg.norm(self.points[i+1] - self.points[i])

        return length

    def get_electromotive_force(self, particles: list[PointParticle], electric_field: np.ndarray[np.float64]) -> np.float64:
        """Calculate the electromotive force(emf) generated across the wire.

        Parameters
        ----------
        particle : PointParticle
            The particle that is exerting a electric field across the wire.
        electric_field : np.ndarray[float64]
            A constant electric field that is being applied to the wire. 

        Returns
        -------
        The difference in electric potential between the ends of the wires.
        """
        def sum_electric_fields(point: np.ndarray[np.float64]) -> np.ndarray[np.float64]:
            """Calculate the net electric field at a given point.

            Parameters
            ----------
            point : np.ndarray
                A 3D vector representing the point to calculate the electric field at.

            Returns
            -------
            np.ndarray
                A 3D vector representing the net electric field in V/m or N/C.
            """
            # Find the electric field due to each particle
            electric_fields = map(
                lambda particle: particle.electric_field(point), particles
            )

            return sum(electric_fields) + electric_field
        
        # The vector of the space between the wires
        wire_vector = self.end2 - self.end1
        unit_vector = wire_vector / self.get_length()

        # Negative integral of the electric field across the wire.
        return -scipy.integrate.quad_vec(
            lambda x: sum_electric_fields(self.end1.point + unit_vector * x),
            0,
            self.get_length()
        )

    def get_current(self) -> np.float64:
        """Calculate the current flowing through this wire.

        Returns
        -------
        np.float64
            The current flowing through the wire in amps.
        """
        return self.electromotive_force() / self.resistance

    def get_magnetic_field(self, point: np.ndarray[np.float64]) -> np.ndarray[np.float64]:
        """Calculate the magnetic field generated by this wire at a point.

        Parameters
        ----------
        point : np.ndarray
            A 3D vector of np.float64 representing a point to calculate the magnetic field at.

        Returns
        -------
        np.ndarray
            A 3D vector representing the strength of the magnetic field at the point in teslas. 
        """
        def r(l: np.float64) -> np.ndarray[np.float64]:
            """Calculate r, the 3D vector between the magnetic field point and the point of integration.

            Parameters
            ----------
            l : np.float64
                The distance along this wire from `self.point1` in meters.

            Returns
            -------
            np.ndarray
                A 3D vector between the point `l` distance away from `self.point1` along the wire and `point`.
            """
            wire_vector = self.end2 - self.end1
            unit_vector = wire_vector / self.get_length()
            return point - (self.end1 + l * unit_vector)

        # Biot-Savart law
        return scipy.constants.mu_0 * np.cross(
            self.current(),
            scipy.integrate.quad(
                r() / np.linalg.norm(r()) ** 3,
                0,
                self.get_length()
            )
        ) / 4 * scipy.constants.pi

if __name__ == '__main__':
    points = np.array(
        (
            (0, 0, 0),
            (1, 1, 1),
            (4, 4, 4)
        )
    )
    wire = Wire(points, 1.0)
    print(wire.get_total_length())